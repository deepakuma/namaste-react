 -D -- Dev dependencies
 caret - ^ -- upgrade to minor version
 tilde - ~ -- upgrade to major version
 npx - We have to execute parcel with entry point of our app(index.html)
 npx parcel index.html
 Got error while rummimg command and fixed it with this https://github.com/parcel-bundler/parcel/issues/7104
 I will never touch node_modules for any changes
 hot module replacement (HMR), parcel will keep track on all the changes you are making and reflect it very fast. 
 File watcher algorithm, it is used by parcel to reflect changes in real time and it is written in C++. 
 parcel-cache 
 dist folder keep the files minified for parcel. 
 npx parcel build index.html -  it is for production build
 npx parcel index.html - for development build
 { hot module replacement (HMR), File watcher algorithm, bundling, minify, cleaning our code, manages dev and production build, super fast build algorithm, Image optimisation, caching while development, compression, compatible with older version of browser, HTTPS on dev- parcel(npx parcel index.html --https), manage port number, consistent hashing algorithm, zero config, transitive dependencies,create a server to run, tree shaking } - parcel
 We should push .parcel-cache in gitignore
 Anything that we can generate on server will be put inside gitignore as we can generate on server
 transitive dependencies are dependencies where parcel 
 When we are building a production ready app we need to do a lots of things that are written in line 14 and we can't do that alone we need some dependecies on it and those dependecies are also dependent on other things. 
 BrowserList is used to make web compatible with browsers.
 Script type in your html, We have to used type = "module" so that it import file. // Mozilla check there
Git command to push repository for the first time.
git init
git add .
git commit -m "Add existing project files to Git"
git remote add origin https://github.com/cameronmcnz/example-website.git
git push -u -f origin master
 Pollyfill is a code which is the replacement for the newer version of code 
 Babel 
ES6 is newer version of javascript
Babel convert the code with using BrowserList. Babel is node package. Taking some code and replacing, spitting some code
Tree shaking mean removing unwanted code.
create react app uses webpack and babel.
We have added script in package.json for start and build through parcel
babel plugin transform remove console- it removes our console log
Always have to gives keys to my component children, give keys passing as a props, unique
render means updating something in the DOM
react.createElement is creating an object => HTML(DOM) (which then converts into HTML and render in the DOM)
JSX - javascript xml (not documented though), It is a HTML like syntax but it is not HTML inside javascript
In JSX we use camel notation variable name. It uses React.createElement behind the scene, readability, maintain, developer friendly
Babel understand the html like syntax code and convert it to readable for javascript
-- read babel 
Name of the components starts with the capital letter, it is conventional but not mandatory.
Functional component is a normal function.
react element and react component, react element render (heading) or {heading} when calling and react component render (<heading />) or {heading()} when calling
We can write any piece of javascript in {}.
<Title />- this is component composition- use of component inside of a component
JSX expressions must have only parent element
React.Fragment -  It is a component that is exported by the react. <React.Fragment><React.Fragment/>. It can also be written as empty tags - <></>. It does not be inside html,  you can't style it.
inline style - style = "background":"red";
Inline style in react - style = {styelObj}
Config driven UI - depends on config from backend API
optional chaining - ?.
props - whartever you pass over calling a functional component as an attribute is known as props inside react
You pass an argument and receive a parameter - function fn (param1,param2){

}
and 
fn(arg1, arg2);
destructuring the object like - props to {restaurant}
...data - spread operator
map is the best way to do functional programming
Virtual dom - We keep a representation of a DOM with us in our code. 
We need virtual dom for something known as reconciliation. It is an algorithm that react uses to diff one trees with another trees. Between actual DOM and virtual DOM. It rerenders only diff part.
React Fiber- New reconciliation engine, it came in react 16, it is responsible for diff.
Why don't we use index as a key? Never use your index as key. If the order of the items may change. This can negatively impact performance and may cause issues with component state.
no key <<<<<<< index key <<<< unique key(best practice) 
We need to wrap our code in a proper modular files. 
File structure - We can keep however we want. But we can categories to make a distribution.
export default title
export const title
import {title} from "./component/header"; - extracting from the header files - named import
import title from "./component/title"; - default import
import * obj from "./component/title"; obj.Title
You can use to write header.jsx too for file name
React uses one way data binding, we uses onChange method to make any changes from UI side or it ll make no changes.
Every component in React maintains a state, so you can put variable into the state.
useState Hook, A hook is just a normal function. It is to create local state variable, import from react library using named variable, it returns the array. returns = [variable name, function to update the variable]
What is state? What is Hooks? What is useState? 
We need state variable, whenever variable changes react will not know that it have to rerender. React doesn't know about our variable. You want your variable to sync with the UI , you need to use your state variable.